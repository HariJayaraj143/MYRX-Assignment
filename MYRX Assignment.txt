1.nums=[-12, -8 , -7, -5, 2, 4, 5, 11, 15] 
arr=[]
for i in nums:
    arr.append(i*i)
for i in range(len(arr)):
    for j in range(i+1,len(arr)):
        if(arr[i]>=arr[j]):
            arr[i],arr[j]=arr[j],arr[i]
print(arr)   

2.
from datetime import datetime
from typing import List

class Student:
    def __init__(self, name: str, id: str, date_of_joining: datetime, address: List['Address']):
        if name is None or id is None or date_of_joining is None or address is None:
            raise ValueError("fields cannot be null")
        self.name = name
        self.id = id
        self.date_of_joining = date_of_joining
        self.address = list(address)

    def get_name(self) -> str:
        return self.name

    def get_id(self) -> str:
        return self.id

    def get_date_of_joining(self) -> datetime:
        return self.date_of_joining

    def get_address(self) -> List['Address']:
        return self.address.copy()

    def __str__(self) -> str:
        return f"Student{{name='{self.name}', id='{self.id}', date_of_joining='{self.date_of_joining}', address='{self.address}'}}"

class Address:
    def __init__(self, street: str, city: str, state: str, pincode: str):
        if street is None or city is None or state is None or pincode is None:
            raise ValueError("address fields cannot be null")
        self.street = street
        self.city = city
        self.state = state
        self.pincode = pincode

    def get_street(self) -> str:
        return self.street

    def get_city(self) -> str:
        return self.city

    def get_state(self) -> str:
        return self.state

    def get_pincode(self) -> str:
        return self.pincode

    def __str__(self) -> str:
        return f"Address{{street='{self.street}', city='{self.city}', state='{self.state}', pincode='{self.pincode}'}}"


3.
items=["R","G","B","G","G","R","B","B","G"] 
for i in range(len(items)):
    for j in range(i+1,len(items)):
        if(items[i]>items[j]):
            items[i],items[j]=items[j],items[i]
print(items) 

4.
arr = ["9:00", "9:40", "9:50", "11:00", "15:00", "18:00"]
dep = ["9:10", "12:00", "11:20", "11:30", "19:00", "20:00"]
n = len(arr)
for i in range(n):
    hours, minutes = map(int, arr[i].split(':'))
    arr[i] = hours * 60 + minutes

for i in range(n):
    hours, minutes = map(int, dep[i].split(':'))
    dep[i] = hours * 60 + minutes
arr.sort()
dep.sort()

platform_needed = 0
max_platforms = 0
i = 0  
j = 0 
while i < n and j < n:
    if arr[i] <= dep[j]:
        platform_needed += 1
        max_platforms = max(max_platforms, platform_needed)
        i += 1
    else:
        platform_needed -= 1
        j += 1

print(max_platforms)

5.
hashmap = {101: "John Doe", 102: "Jane Smith", 103: "Peter Johnson"}
hashmap_items = list(hashmap.items())
n = len(hashmap_items)
for i in range(n):
    for j in range(0, n - i - 1):
        if hashmap_items[j][1] > hashmap_items[j + 1][1]:
            hashmap_items[j], hashmap_items[j + 1] = hashmap_items[j + 1], hashmap_items[j]
sorted_hashmap = {k: v for k, v in hashmap_items}
print(sorted_hashmap)
         
    